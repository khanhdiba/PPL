# Generated from d:/MAIN COURSE/BASIC COURSES/PPL/PPL/assignment1/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *
#Dinh Ba Khanh - 2252323


def serializedATN():
    return [
        4,0,65,477,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
        1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
        1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,
        1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,5,51,335,8,51,
        10,51,12,51,338,9,51,1,52,1,52,1,52,4,52,343,8,52,11,52,12,52,344,
        3,52,347,8,52,1,53,1,53,1,53,4,53,352,8,53,11,53,12,53,353,1,54,
        1,54,1,54,4,54,359,8,54,11,54,12,54,360,1,55,1,55,1,55,4,55,366,
        8,55,11,55,12,55,367,1,56,4,56,371,8,56,11,56,12,56,372,1,57,1,57,
        3,57,377,8,57,1,57,1,57,1,58,1,58,1,58,5,58,384,8,58,10,58,12,58,
        387,9,58,1,58,3,58,390,8,58,1,59,1,59,1,59,1,60,1,60,3,60,397,8,
        60,1,61,1,61,5,61,401,8,61,10,61,12,61,404,9,61,1,61,1,61,1,62,1,
        62,1,62,1,62,5,62,412,8,62,10,62,12,62,415,9,62,1,62,1,62,1,63,1,
        63,1,63,1,63,1,63,5,63,424,8,63,10,63,12,63,427,9,63,1,63,1,63,1,
        63,1,63,1,63,1,64,1,64,1,64,3,64,437,8,64,1,64,1,64,1,65,4,65,442,
        8,65,11,65,12,65,443,1,65,1,65,1,66,1,66,1,66,1,67,1,67,5,67,453,
        8,67,10,67,12,67,456,9,67,1,67,1,67,1,67,3,67,461,8,67,1,67,1,67,
        1,68,1,68,1,68,1,69,1,69,5,69,470,8,69,10,69,12,69,473,9,69,1,69,
        1,69,1,69,1,425,0,70,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
        107,54,109,55,111,56,113,0,115,0,117,57,119,0,121,0,123,58,125,59,
        127,60,129,61,131,62,133,63,135,64,137,0,139,65,1,0,19,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,49,57,1,
        0,48,48,2,0,66,66,98,98,1,0,48,49,2,0,79,79,111,111,1,0,48,55,2,
        0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,69,69,101,101,2,0,43,
        43,45,45,1,0,46,46,5,0,34,34,92,92,110,110,114,114,116,116,4,0,9,
        10,13,13,34,34,92,92,2,0,10,10,13,13,3,0,9,9,12,13,32,32,1,1,10,
        10,491,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
        0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
        0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
        0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,0,117,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
        0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
        0,0,0,0,139,1,0,0,0,1,141,1,0,0,0,3,144,1,0,0,0,5,149,1,0,0,0,7,
        153,1,0,0,0,9,160,1,0,0,0,11,165,1,0,0,0,13,170,1,0,0,0,15,177,1,
        0,0,0,17,187,1,0,0,0,19,194,1,0,0,0,21,198,1,0,0,0,23,204,1,0,0,
        0,25,212,1,0,0,0,27,218,1,0,0,0,29,222,1,0,0,0,31,231,1,0,0,0,33,
        237,1,0,0,0,35,243,1,0,0,0,37,247,1,0,0,0,39,252,1,0,0,0,41,258,
        1,0,0,0,43,260,1,0,0,0,45,262,1,0,0,0,47,264,1,0,0,0,49,266,1,0,
        0,0,51,268,1,0,0,0,53,271,1,0,0,0,55,274,1,0,0,0,57,276,1,0,0,0,
        59,278,1,0,0,0,61,281,1,0,0,0,63,284,1,0,0,0,65,287,1,0,0,0,67,290,
        1,0,0,0,69,292,1,0,0,0,71,294,1,0,0,0,73,297,1,0,0,0,75,300,1,0,
        0,0,77,303,1,0,0,0,79,306,1,0,0,0,81,309,1,0,0,0,83,312,1,0,0,0,
        85,314,1,0,0,0,87,316,1,0,0,0,89,318,1,0,0,0,91,320,1,0,0,0,93,322,
        1,0,0,0,95,324,1,0,0,0,97,326,1,0,0,0,99,328,1,0,0,0,101,330,1,0,
        0,0,103,332,1,0,0,0,105,346,1,0,0,0,107,348,1,0,0,0,109,355,1,0,
        0,0,111,362,1,0,0,0,113,370,1,0,0,0,115,374,1,0,0,0,117,380,1,0,
        0,0,119,391,1,0,0,0,121,396,1,0,0,0,123,398,1,0,0,0,125,407,1,0,
        0,0,127,418,1,0,0,0,129,436,1,0,0,0,131,441,1,0,0,0,133,447,1,0,
        0,0,135,450,1,0,0,0,137,464,1,0,0,0,139,467,1,0,0,0,141,142,5,105,
        0,0,142,143,5,102,0,0,143,2,1,0,0,0,144,145,5,101,0,0,145,146,5,
        108,0,0,146,147,5,115,0,0,147,148,5,101,0,0,148,4,1,0,0,0,149,150,
        5,102,0,0,150,151,5,111,0,0,151,152,5,114,0,0,152,6,1,0,0,0,153,
        154,5,114,0,0,154,155,5,101,0,0,155,156,5,116,0,0,156,157,5,117,
        0,0,157,158,5,114,0,0,158,159,5,110,0,0,159,8,1,0,0,0,160,161,5,
        102,0,0,161,162,5,117,0,0,162,163,5,110,0,0,163,164,5,99,0,0,164,
        10,1,0,0,0,165,166,5,116,0,0,166,167,5,121,0,0,167,168,5,112,0,0,
        168,169,5,101,0,0,169,12,1,0,0,0,170,171,5,115,0,0,171,172,5,116,
        0,0,172,173,5,114,0,0,173,174,5,117,0,0,174,175,5,99,0,0,175,176,
        5,116,0,0,176,14,1,0,0,0,177,178,5,105,0,0,178,179,5,110,0,0,179,
        180,5,116,0,0,180,181,5,101,0,0,181,182,5,114,0,0,182,183,5,102,
        0,0,183,184,5,97,0,0,184,185,5,99,0,0,185,186,5,101,0,0,186,16,1,
        0,0,0,187,188,5,115,0,0,188,189,5,116,0,0,189,190,5,114,0,0,190,
        191,5,105,0,0,191,192,5,110,0,0,192,193,5,103,0,0,193,18,1,0,0,0,
        194,195,5,105,0,0,195,196,5,110,0,0,196,197,5,116,0,0,197,20,1,0,
        0,0,198,199,5,102,0,0,199,200,5,108,0,0,200,201,5,111,0,0,201,202,
        5,97,0,0,202,203,5,116,0,0,203,22,1,0,0,0,204,205,5,98,0,0,205,206,
        5,111,0,0,206,207,5,111,0,0,207,208,5,108,0,0,208,209,5,101,0,0,
        209,210,5,97,0,0,210,211,5,110,0,0,211,24,1,0,0,0,212,213,5,99,0,
        0,213,214,5,111,0,0,214,215,5,110,0,0,215,216,5,115,0,0,216,217,
        5,116,0,0,217,26,1,0,0,0,218,219,5,118,0,0,219,220,5,97,0,0,220,
        221,5,114,0,0,221,28,1,0,0,0,222,223,5,99,0,0,223,224,5,111,0,0,
        224,225,5,110,0,0,225,226,5,116,0,0,226,227,5,105,0,0,227,228,5,
        110,0,0,228,229,5,117,0,0,229,230,5,101,0,0,230,30,1,0,0,0,231,232,
        5,98,0,0,232,233,5,114,0,0,233,234,5,101,0,0,234,235,5,97,0,0,235,
        236,5,107,0,0,236,32,1,0,0,0,237,238,5,114,0,0,238,239,5,97,0,0,
        239,240,5,110,0,0,240,241,5,103,0,0,241,242,5,101,0,0,242,34,1,0,
        0,0,243,244,5,110,0,0,244,245,5,105,0,0,245,246,5,108,0,0,246,36,
        1,0,0,0,247,248,5,116,0,0,248,249,5,114,0,0,249,250,5,117,0,0,250,
        251,5,101,0,0,251,38,1,0,0,0,252,253,5,102,0,0,253,254,5,97,0,0,
        254,255,5,108,0,0,255,256,5,115,0,0,256,257,5,101,0,0,257,40,1,0,
        0,0,258,259,5,43,0,0,259,42,1,0,0,0,260,261,5,45,0,0,261,44,1,0,
        0,0,262,263,5,42,0,0,263,46,1,0,0,0,264,265,5,47,0,0,265,48,1,0,
        0,0,266,267,5,37,0,0,267,50,1,0,0,0,268,269,5,61,0,0,269,270,5,61,
        0,0,270,52,1,0,0,0,271,272,5,33,0,0,272,273,5,61,0,0,273,54,1,0,
        0,0,274,275,5,60,0,0,275,56,1,0,0,0,276,277,5,62,0,0,277,58,1,0,
        0,0,278,279,5,60,0,0,279,280,5,61,0,0,280,60,1,0,0,0,281,282,5,62,
        0,0,282,283,5,61,0,0,283,62,1,0,0,0,284,285,5,38,0,0,285,286,5,38,
        0,0,286,64,1,0,0,0,287,288,5,124,0,0,288,289,5,124,0,0,289,66,1,
        0,0,0,290,291,5,33,0,0,291,68,1,0,0,0,292,293,5,61,0,0,293,70,1,
        0,0,0,294,295,5,58,0,0,295,296,5,61,0,0,296,72,1,0,0,0,297,298,5,
        43,0,0,298,299,5,61,0,0,299,74,1,0,0,0,300,301,5,45,0,0,301,302,
        5,61,0,0,302,76,1,0,0,0,303,304,5,42,0,0,304,305,5,61,0,0,305,78,
        1,0,0,0,306,307,5,47,0,0,307,308,5,61,0,0,308,80,1,0,0,0,309,310,
        5,37,0,0,310,311,5,61,0,0,311,82,1,0,0,0,312,313,5,46,0,0,313,84,
        1,0,0,0,314,315,5,40,0,0,315,86,1,0,0,0,316,317,5,41,0,0,317,88,
        1,0,0,0,318,319,5,123,0,0,319,90,1,0,0,0,320,321,5,125,0,0,321,92,
        1,0,0,0,322,323,5,91,0,0,323,94,1,0,0,0,324,325,5,93,0,0,325,96,
        1,0,0,0,326,327,5,44,0,0,327,98,1,0,0,0,328,329,5,59,0,0,329,100,
        1,0,0,0,330,331,5,58,0,0,331,102,1,0,0,0,332,336,7,0,0,0,333,335,
        7,1,0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,
        1,0,0,0,337,104,1,0,0,0,338,336,1,0,0,0,339,347,7,2,0,0,340,342,
        7,3,0,0,341,343,7,2,0,0,342,341,1,0,0,0,343,344,1,0,0,0,344,342,
        1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,339,1,0,0,0,346,340,
        1,0,0,0,347,106,1,0,0,0,348,349,7,4,0,0,349,351,7,5,0,0,350,352,
        7,6,0,0,351,350,1,0,0,0,352,353,1,0,0,0,353,351,1,0,0,0,353,354,
        1,0,0,0,354,108,1,0,0,0,355,356,7,4,0,0,356,358,7,7,0,0,357,359,
        7,8,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,358,1,0,0,0,360,361,
        1,0,0,0,361,110,1,0,0,0,362,363,7,4,0,0,363,365,7,9,0,0,364,366,
        7,10,0,0,365,364,1,0,0,0,366,367,1,0,0,0,367,365,1,0,0,0,367,368,
        1,0,0,0,368,112,1,0,0,0,369,371,7,2,0,0,370,369,1,0,0,0,371,372,
        1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,114,1,0,0,0,374,376,
        7,11,0,0,375,377,7,12,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,
        1,0,0,0,378,379,3,113,56,0,379,116,1,0,0,0,380,381,3,113,56,0,381,
        385,7,13,0,0,382,384,7,2,0,0,383,382,1,0,0,0,384,387,1,0,0,0,385,
        383,1,0,0,0,385,386,1,0,0,0,386,389,1,0,0,0,387,385,1,0,0,0,388,
        390,3,115,57,0,389,388,1,0,0,0,389,390,1,0,0,0,390,118,1,0,0,0,391,
        392,5,92,0,0,392,393,7,14,0,0,393,120,1,0,0,0,394,397,8,15,0,0,395,
        397,3,119,59,0,396,394,1,0,0,0,396,395,1,0,0,0,397,122,1,0,0,0,398,
        402,5,34,0,0,399,401,3,121,60,0,400,399,1,0,0,0,401,404,1,0,0,0,
        402,400,1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,402,1,0,0,0,
        405,406,5,34,0,0,406,124,1,0,0,0,407,408,5,47,0,0,408,409,5,47,0,
        0,409,413,1,0,0,0,410,412,8,16,0,0,411,410,1,0,0,0,412,415,1,0,0,
        0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,413,1,0,0,
        0,416,417,6,62,0,0,417,126,1,0,0,0,418,419,5,47,0,0,419,420,5,42,
        0,0,420,425,1,0,0,0,421,424,3,127,63,0,422,424,9,0,0,0,423,421,1,
        0,0,0,423,422,1,0,0,0,424,427,1,0,0,0,425,426,1,0,0,0,425,423,1,
        0,0,0,426,428,1,0,0,0,427,425,1,0,0,0,428,429,5,42,0,0,429,430,5,
        47,0,0,430,431,1,0,0,0,431,432,6,63,0,0,432,128,1,0,0,0,433,434,
        5,13,0,0,434,437,5,10,0,0,435,437,5,10,0,0,436,433,1,0,0,0,436,435,
        1,0,0,0,437,438,1,0,0,0,438,439,6,64,1,0,439,130,1,0,0,0,440,442,
        7,17,0,0,441,440,1,0,0,0,442,443,1,0,0,0,443,441,1,0,0,0,443,444,
        1,0,0,0,444,445,1,0,0,0,445,446,6,65,0,0,446,132,1,0,0,0,447,448,
        9,0,0,0,448,449,6,66,2,0,449,134,1,0,0,0,450,454,5,34,0,0,451,453,
        3,121,60,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,
        1,0,0,0,455,460,1,0,0,0,456,454,1,0,0,0,457,458,5,13,0,0,458,461,
        5,10,0,0,459,461,7,18,0,0,460,457,1,0,0,0,460,459,1,0,0,0,461,462,
        1,0,0,0,462,463,6,67,3,0,463,136,1,0,0,0,464,465,5,92,0,0,465,466,
        8,14,0,0,466,138,1,0,0,0,467,471,5,34,0,0,468,470,3,121,60,0,469,
        468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,
        474,1,0,0,0,473,471,1,0,0,0,474,475,3,137,68,0,475,476,6,69,4,0,
        476,140,1,0,0,0,21,0,336,344,346,353,360,367,372,376,385,389,396,
        402,413,423,425,436,443,454,460,471,5,6,0,0,1,64,0,1,66,1,1,67,2,
        1,69,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    EQUAL = 26
    NOT_EQUAL = 27
    LT = 28
    GT = 29
    LTE = 30
    GTE = 31
    AND = 32
    OR = 33
    NOT = 34
    ASSIGN = 35
    ASSIGN_OP = 36
    ASSIGN_ADD = 37
    ASSIGN_SUB = 38
    ASSIGN_MUL = 39
    ASSIGN_DIV = 40
    ASSIGN_MOD = 41
    DOT = 42
    LRB = 43
    RRB = 44
    LCB = 45
    RCB = 46
    LSB = 47
    RSB = 48
    COMMA = 49
    SEMICOLON = 50
    COLON = 51
    ID = 52
    DEC = 53
    BIN = 54
    OCT = 55
    HEX = 56
    FLOAT_LIT = 57
    STR_LIT = 58
    SINGLE_COMMENT = 59
    MULTI_COMMENT = 60
    NEWLINE = 61
    WS = 62
    ERROR_CHAR = 63
    UNCLOSE_STRING = 64
    ILLEGAL_ESCAPE = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'", "':'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
            "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LT", "GT", "LTE", "GTE", 
            "AND", "OR", "NOT", "ASSIGN", "ASSIGN_OP", "ASSIGN_ADD", "ASSIGN_SUB", 
            "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "DOT", "LRB", "RRB", 
            "LCB", "RCB", "LSB", "RSB", "COMMA", "SEMICOLON", "COLON", "ID", 
            "DEC", "BIN", "OCT", "HEX", "FLOAT_LIT", "STR_LIT", "SINGLE_COMMENT", 
            "MULTI_COMMENT", "NEWLINE", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", 
                  "LT", "GT", "LTE", "GTE", "AND", "OR", "NOT", "ASSIGN", 
                  "ASSIGN_OP", "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_MUL", 
                  "ASSIGN_DIV", "ASSIGN_MOD", "DOT", "LRB", "RRB", "LCB", 
                  "RCB", "LSB", "RSB", "COMMA", "SEMICOLON", "COLON", "ID", 
                  "DEC", "BIN", "OCT", "HEX", "DIGIT", "EXP", "FLOAT_LIT", 
                  "ESCAPE_SEQUENCE", "CHAR_LIT", "STR_LIT", "SINGLE_COMMENT", 
                  "MULTI_COMMENT", "NEWLINE", "WS", "ERROR_CHAR", "UNCLOSE_STRING", 
                  "ILLEGAL_CHAR", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None
        self.preType = None

    def emit(self):
        tk = self.type
        self.preType = tk;
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();

    def handleNewline(self):
        if self.preType in {
            self.ID, self.BIN, self.OCT, self.DEC, self.HEX, self.FLOAT_LIT, self.TRUE, self.FALSE, self.STR_LIT, self.NIL,
            self.RETURN, self.CONTINUE, self.BREAK,
            self.RCB, self.RSB, self.RRB,
            self.INT, self.FLOAT, self.BOOLEAN, self.STRING
        }:
            self.type = self.SEMICOLON
            self.text = ";" 
        else:
            self.skip()


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[64] = self.NEWLINE_action 
            actions[66] = self.ERROR_CHAR_action 
            actions[67] = self.UNCLOSE_STRING_action 
            actions[69] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             self.handleNewline() 
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[0:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[0:-1])
                else:
                    raise UncloseString(self.text[0:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                raise IllegalEscape(self.text[0:])

     


